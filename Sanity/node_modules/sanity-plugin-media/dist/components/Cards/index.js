"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var react_1 = __importStar(require("react"));
var react_window_1 = require("react-window");
var theme_ui_1 = require("theme-ui");
var useTypedSelector_1 = __importDefault(require("../../hooks/useTypedSelector"));
var Card_1 = __importDefault(require("../Card"));
var innerElementType = function (props) {
    var children = props.children, style = props.style;
    return (react_1.default.createElement(theme_ui_1.Box, { sx: {
            mx: 'auto',
            position: 'relative',
            width: style.width
        } },
        react_1.default.createElement("div", { style: style }, children)));
};
var VirtualCell = react_1.memo(function (props) {
    var _a;
    var columnIndex = props.columnIndex, data = props.data, rowIndex = props.rowIndex, style = props.style;
    var columnCount = data.columnCount, items = data.items, selectedIds = data.selectedIds;
    var index = columnCount * rowIndex + columnIndex;
    var item = items[index];
    var assetId = (_a = item === null || item === void 0 ? void 0 : item.asset) === null || _a === void 0 ? void 0 : _a._id;
    // Add padding to virtual cells
    var MARGIN_X = 3;
    var MARGIN_Y = 3;
    var cellStyle = __assign(__assign({}, style), { left: Number(style.left) + MARGIN_X, right: Number(style.left) + MARGIN_X, top: Number(style.top) + MARGIN_Y, bottom: Number(style.top) + MARGIN_Y, width: Number(style.width) - MARGIN_X * 2, height: Number(style.height) - MARGIN_Y * 2 });
    return (react_1.default.createElement(Card_1.default, { item: item, key: "grid-" + assetId, selected: selectedIds.includes(assetId), style: cellStyle }));
});
var Cards = react_1.forwardRef(function (props, ref) {
    var height = props.height, items = props.items, itemCount = props.itemCount, onItemsRendered = props.onItemsRendered, width = props.width;
    // Redux
    var selectedAssets = useTypedSelector_1.default(function (state) { return state.selectedAssets; });
    var selectedIds = (selectedAssets && selectedAssets.map(function (asset) { return asset._id; })) || [];
    var cardWidth = 260;
    var cardHeight = 220;
    var columnCount = Math.max(1, Math.floor(width / cardWidth));
    var rowCount = Math.ceil(itemCount / columnCount);
    return (react_1.default.createElement(react_window_1.VariableSizeGrid, { className: "media__custom-scrollbar", columnCount: columnCount, columnWidth: function () { return cardWidth; }, height: height, innerElementType: innerElementType, itemData: {
            columnCount: columnCount,
            items: items,
            selectedIds: selectedIds
        }, onItemsRendered: onItemsRendered, ref: ref, rowCount: rowCount, rowHeight: function () { return cardHeight; }, style: {
            overflowX: 'hidden',
            overflowY: 'scroll'
        }, width: width }, VirtualCell));
});
exports.default = Cards;
